{"version":3,"sources":["myComponents/Header.js","myComponents/Footer.js","myComponents/TextForm.js","myComponents/About.js","myComponents/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","mode","to","title","type","id","onClick","toggleMode","htmlFor","prototypes","PropTypes","string","isRequired","defaultProps","Footer","style","position","top","TextForm","useState","Text","setText","color","class","split","filter","ele","length","heading","value","onChange","event","target","backgroundColor","rows","disabled","uNewText","toUpperCase","showalert","lNewText","toLowerCase","document","getElementById","navigator","clipboard","writeText","getSelection","removeAllRanges","newText","join","About","myStyle","Alert","height","alert","role","msg","App","setMode","setalert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9932178.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Header = (props) => {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li>\r\n\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  )\r\n}\r\n\r\nHeader.prototypes = {\r\n  title: PropTypes.string.isRequired\r\n}\r\nHeader.defaultProps = {\r\n  title: \"Text Utiles\"\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div className=\"bg-dark text-light py-2 mb-0 my-4\"style={{position: \"relative\",top:\"15vh\"}}>\r\n            <p className=\"text-center \">\r\n            copyright &copy; Text Analyzer\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport const TextForm = (props) => {\r\n    const [Text, setText] = useState(\"\");\r\n    const handleUpperCase = () => {\r\n        let uNewText = Text.toUpperCase();\r\n        setText(uNewText);\r\n        props.showalert(\"Text Convert to Upper case Successfully.\", \"success\");\r\n    }\r\n    const handleLowerCase = () => {\r\n        let lNewText = Text.toLowerCase();\r\n        setText(lNewText);\r\n        props.showalert(\"Text Convert to Lower case Successfully.\", \"success\");\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setText(\"\");\r\n        props.showalert(\"Text clear Successfully.\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        var Text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        navigator.clipboard.writeText(Text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showalert(\"Text copy Successfully.\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        var newText = Text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showalert(\"Remove extra spaces Successfully.\", \"success\");\r\n    }\r\n     \r\n    {/*const punc = Text.split(\".\").length + Text.split(\",\").length + Text.split(\":\").length + Text.split(\";\").length;\r\ndocument.getElementById(\"punch\").innerHTML=punc;*/}\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#0a0643' }} >\r\n\r\n                <div className=\"mb-3 my-3\">\r\n\r\n                    <button type=\"button\" class=\"btn btn-primary position-relative mx-3 my-2\">Sentence\r\n                        <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                        {Text.split(\".\").filter((ele)=>{return ele.length!==0}).length}\r\n                            <span class=\"visually-hidden\">unread messages</span>\r\n                        </span>\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-primary position-relative mx-3 my-2\">\r\n                        Word\r\n                        <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                        {Text.split(/\\s+/).filter((ele)=>{return ele.length!==0}).length}\r\n                            <span class=\"visually-hidden\">unread messages</span>\r\n                        </span>\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-primary position-relative mx-3 my-2\">\r\n                        Character\r\n                        <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                        {Text.length}\r\n                            <span class=\"visually-hidden\">unread messages</span>\r\n                        </span>\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-primary position-relative mx-3 my-2\">\r\n                    Minutes to read text\r\n                        <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                        {0.008 * Text.split(\" \").filter((ele)=>{return ele.length!==0}).length}\r\n                            <span class=\"visually-hidden\">unread messages</span>\r\n                        </span>\r\n                    </button>\r\n\r\n                    {/*<p style={{ backgroundColor: '#11f8de', width: '60px', padding: '5px', display: 'inline-block' }}>{Text.split(\".\").length} Sentence</p>*/}\r\n                    \r\n                    <h3 className=\"my-2\">{props.heading}</h3>\r\n\r\n                    <textarea className=\"form-control\" value={Text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#13466e' : 'white', color: props.mode === 'dark' ? 'white' : '#0a0643' }} id=\"exampleFormControlTextarea1\" rows=\"5\"></textarea>\r\n                </div>\r\n                <button disabled={Text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleUpperCase}>Convert Upper Case</button>\r\n                <button disabled={Text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleLowerCase}>Convert Lower Case</button>\r\n                <button disabled={Text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleClear}>Clear Text</button>\r\n                <button disabled={Text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button disabled={Text.length===0} className=\"btn btn-primary my-2 mx-2\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#0a0643' }}>\r\n                \r\n               \r\n                <h2>Preview</h2>\r\n                <p>{Text.length > 0 ? Text : \"Enter text to preview\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const About = (props) => {\r\n    {/*const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btntext, setBtntext] = useState(\"Enable dark mode\")\r\n\r\n    const toggleStyle=()=>{\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                boder: '1px solid white'\r\n            })\r\n            setBtntext(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtntext(\"Enable Dark Mode\")\r\n        }\r\n    } */}\r\n    let myStyle={\r\n        color: props.mode === 'dark'?'white':'black',\r\n        backgroundColor: props.mode === 'dark'?'black' : 'white'\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container\" style={myStyle}>\r\n                <h1 className=\"my-4\">About Us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={myStyle}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/*<div className=\"container\">\r\n                    <button className=\"btn btn-primary\" onClick={toggleStyle}>{btntext}</button>\r\n    </div>*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Alert = (props) => {\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {props.alert &&  <div className={`alert  alert-dismissible fade show alert-${props.alert.type} `} role=\"alert\">\r\n         {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n  \r\n     \r\n    )\r\n}\r\n","//import logo from './logo.svg';\nimport React, {useState} from 'react'\nimport './App.css';\nimport {Header} from \"./myComponents/Header\";\nimport {Footer} from \"./myComponents/Footer\";\nimport {TextForm} from \"./myComponents/TextForm\";\nimport { About } from './myComponents/About';\nimport { Alert } from './myComponents/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#0a0643';\n      showalert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showalert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n    const [alert, setalert] = useState(null);\n    const showalert = (message, type)=>{\n        setalert({\n          msg:message,\n          type:type\n        })\n        setTimeout(()=>{\n          setalert(null);\n        }, 2500);\n    }\n    \n   \n\n  return (\n    <>\n    \n    <Router>\n    <Header title=\"Text Analyzer\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert} />\n    <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}  />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm heading=\"Enter text here\" mode={mode} showalert={showalert}/>\n          </Route>\n        </Switch>\n    </Router>\n    <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}